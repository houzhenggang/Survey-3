<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hanvon.survey.component.dao.i.UserMapper">
	<resultMap id="BaseResultMap" type="com.hanvon.survey.entities.guest.User">
		<id column="USER_ID" property="userId" jdbcType="INTEGER" />
		<result column="USER_NAME" property="userName" jdbcType="VARCHAR" />
		<result column="USER_PWD" property="userPwd" jdbcType="VARCHAR" />
		<result column="COMPANY" property="company" jdbcType="BIT" />
		<result column="CODE_ARR_STR" property="codeArrStr" jdbcType="VARCHAR" />
	</resultMap>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from guest_user
		where USER_ID = #{userId,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.hanvon.survey.entities.guest.User" useGeneratedKeys="true" keyProperty="userId">
		insert into guest_user (USER_ID, USER_NAME, USER_PWD,
		COMPANY, CODE_ARR_STR)
		values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR},
		#{userPwd,jdbcType=VARCHAR},
		#{company,jdbcType=BIT}, #{codeArrStr,jdbcType=VARCHAR})
	</insert>
	<update id="updateByPrimaryKey" parameterType="com.hanvon.survey.entities.guest.User">
		update guest_user
		set USER_NAME = #{userName,jdbcType=VARCHAR},
		USER_PWD = #{userPwd,jdbcType=VARCHAR},
		COMPANY = #{company,jdbcType=BIT},
		CODE_ARR_STR = #{codeArrStr,jdbcType=VARCHAR}
		where USER_ID = #{userId,jdbcType=INTEGER}
	</update>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select USER_ID, USER_NAME, USER_PWD, COMPANY, CODE_ARR_STR
		from guest_user
		where USER_ID = #{userId,jdbcType=INTEGER}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		select USER_ID, USER_NAME, USER_PWD, COMPANY, CODE_ARR_STR
		from guest_user
	</select>
	
	<select id="isExistsUserName" parameterType="string" resultType="integer">
		select count(*) from guest_user where user_name = #{userName}
	</select>
	
	<select id="checkLogin" resultMap="BaseResultMap">
		select USER_ID, USER_NAME, USER_PWD, COMPANY, CODE_ARR_STR
		from guest_user
		where USER_NAME=#{userName} and USER_PWD=#{md5UserPwd}
	</select>
	
	
	<resultMap id="roleResultMap"  type="role">
		<id column="role_id" property="roleId" jdbcType="INTEGER" />
		<collection property="authSet" column="role_id" ofType="auth">
			<id column="auth_id" property="authId" jdbcType="INTEGER" />
			<collection property="resSet" column="auth_id" ofType="res">
				<id column="res_id" property="resId" jdbcType="INTEGER" />
				<!-- <result column="servlet_path" property="servletPath" jdbcType="CHAR" />
				<result column="public_status" property="publicStatus" jdbcType="BIT" /> -->
				<result column="res_code" property="resCode" jdbcType="INTEGER" />
				<result column="res_pos" property="resPos" jdbcType="INTEGER" />
			</collection>
		</collection>
	</resultMap>
	
	<select id="getDeeplyRoleSet" parameterType="int" resultMap="roleResultMap">
		SELECT 
		   inner_user_role.`user_id`,
		   manager_role.`role_id`,
		   manager_auth.`auth_id`,
		   manager_res.`res_id`,
		   manager_res.`res_code`,
		   manager_res.`res_pos`  
		FROM
		  inner_user_role 
		  LEFT JOIN manager_role 
		    ON inner_user_role.`role_id` = manager_role.`role_id` 
		  LEFT JOIN inner_role_auth 
		    ON manager_role.`role_id` = inner_role_auth.`role_id` 
		  LEFT JOIN manager_auth 
		    ON inner_role_auth.`auth_id` = manager_auth.`auth_id` 
		  LEFT JOIN inner_auth_res 
		    ON manager_auth.`auth_id` = inner_auth_res.`auth_id` 
		  LEFT JOIN manager_res 
		    ON inner_auth_res.`res_id` = manager_res.`res_id` 
		
		WHERE user_id = #{userId};
	</select>
	
	
	<insert id="saveUserRoleRelationShip">
		insert into inner_user_role(user_id,role_id) values(#{userId},#{roleId})
	</insert>
	
	<update id="updateCodeArrStrByUserId">
		update guest_user
		set 
		CODE_ARR_STR = #{codeArrStr}
		where USER_ID = #{userId}
	</update>
	
	<update id="updateCodeArrStrForUserAll">
		<foreach collection="userAll" item="user" separator=";">
			update guest_user
			set 
			CODE_ARR_STR = #{user.codeArrStr}
			where USER_ID = #{user.userId}
		</foreach>
	</update>
	
</mapper>